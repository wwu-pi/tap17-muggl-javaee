package de.wwu.muggl.symbolic.testCases.jpa.db;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.metamodel.EntityType;
import javax.persistence.metamodel.Metamodel;

import de.wwu.muggl.db.constraint.EntityConstraintAnalyzer;
import de.wwu.muggl.db.entry.DatabaseObject;
import de.wwu.muggl.instructions.FieldResolutionError;
import de.wwu.muggl.solvers.Solution;
import de.wwu.muggl.solvers.expressions.AutoGeneratedGetterConstant;
import de.wwu.muggl.solvers.expressions.Constant;
import de.wwu.muggl.solvers.expressions.Expression;
import de.wwu.muggl.solvers.expressions.IntConstant;
import de.wwu.muggl.solvers.expressions.NumericConstant;
import de.wwu.muggl.solvers.expressions.NumericVariable;
import de.wwu.muggl.solvers.expressions.Variable;
import de.wwu.muggl.symbolic.obj.SymbolicObjectStore;
import de.wwu.muggl.vm.classfile.ClassFile;
import de.wwu.muggl.vm.classfile.ClassFileException;
import de.wwu.muggl.vm.classfile.structures.Attribute;
import de.wwu.muggl.vm.classfile.structures.Field;
import de.wwu.muggl.vm.classfile.structures.Method;
import de.wwu.muggl.vm.classfile.structures.attributes.AttributeRuntimeVisibleAnnotations;
import de.wwu.muggl.vm.classfile.structures.attributes.elements.Annotation;
import de.wwu.muggl.vm.initialization.Arrayref;
import de.wwu.muggl.vm.initialization.Objectref;
import de.wwu.muggl.vm.var.EntityObjectref;
import de.wwu.muggl.vm.var.ReferenceArrayListVariable;
import de.wwu.muggl.vm.var.ReferenceCollectionVariable;
import de.wwu.muggl.vm.var.ReferenceVariable;
import de.wwu.muggl.vm.var.SymbolicArrayref;
import de.wwu.muggl.vm.var.gen.types.EntityDateObjectref;

public class RequiredDatabaseStateTextGenerator {
	
	protected Solution solution;
	
	protected SymbolicObjectStore objectStore;
	
	protected Metamodel metamodel;

	// key=objectId, value=fieldName
	protected Map<String, String> objectFieldNameMap;
	
	// key=entityName, value=amount of generated entities
	// this is to generate field names like, player1, player2, league1, league2, etc...
	protected Map<String, Integer> generatedEntityCounterMap;
	
	protected Set<String> entityObjectIds;
	
	public RequiredDatabaseStateTextGenerator(Metamodel metamodel, Solution solution, SymbolicObjectStore objectStore) {
		this.metamodel = metamodel;
		this.objectFieldNameMap = new HashMap<>();
		this.generatedEntityCounterMap = new HashMap<>();
		this.solution = solution;
		this.objectStore = objectStore;
		this.entityObjectIds = new HashSet<>();
	}
	
	public void generateRequiredDatabase(StringBuilder sb, Map<String, Set<DatabaseObject>> requiredDataMap)  {
		sb.append("\t\t// pre-execution required data \r\n");
		sb.append("\t\tutx.begin();\r\n");
		sb.append("\t\tem.joinTransaction();\r\n");
		for(String entityName : requiredDataMap.keySet()) {
			for(DatabaseObject dbObj : requiredDataMap.get(entityName)) {
				sb.append("\t\t// generate object with id: " + dbObj.getObjectId() + "\r\n");
				boolean isNullObject = false;
				if(dbObj instanceof EntityObjectref && ((EntityObjectref)dbObj).isNull()) {
					isNullObject = true;
				}
				
				ClassFile classFile = null;
				if(dbObj instanceof Objectref) {
					classFile = ((Objectref)dbObj).getInitializedClass().getClassFile();
					
				}
				generateObject(sb, dbObj.getObjectId(), dbObj.getObjectType(), dbObj.valueMap(), isNullObject, classFile);
			}
		}
		
		for(String entityObjectId : this.entityObjectIds) {
			String fieldName = this.objectFieldNameMap.get(entityObjectId);
			sb.append("\t\tem.persist(");
			sb.append(fieldName);
			sb.append(");\r\n");
		}
		
		sb.append("\t\tutx.commit();\r\n");
		sb.append("\t\tem.clear();\r\n");
	}

	
	private String generateObject(StringBuilder sb, String objectId, String objectType, Map<String, Object> valueMap, boolean isNullObject, ClassFile classFile) {
		String entityFieldName = null;
		if(objectFieldNameMap.get(objectId) != null) {
			return objectFieldNameMap.get(objectId);
		} else {
			Set<ReferenceVariable> equalObjects = this.objectStore.getEqualObjects(objectId);
			if(equalObjects != null) {
				for(ReferenceVariable eqObj : equalObjects) {
					if(objectFieldNameMap.get(eqObj.getObjectId()) != null) {
						return objectFieldNameMap.get(eqObj.getObjectId());
					}
				}
			}
			
			entityFieldName = getObjectFieldName(objectId, objectType);
			objectFieldNameMap.put(objectId, entityFieldName);
			if(isEntityObjectType(objectType) && !isNullObject) {
				entityObjectIds.add(objectId);
			}
		}
		
		boolean isEntity = isEntityObjectType(objectType);
		if(isEntity) {
			Field idField = getIdField(classFile);
			boolean idIsAutoGenerated = isGeneratedIdAttribute(classFile);
			if(classFile != null && idIsAutoGenerated) {
				Object idValue = valueMap.get(idField.getName());
				if(idValue instanceof Variable) {
					Variable idVar = (Variable)idValue;
					if(!(valueMap.get(idField.getName()) instanceof AutoGeneratedGetterConstant)) {
						String getterName = "get" + idField.getName().substring(0,1).toUpperCase() + idField.getName().substring(1);
						AutoGeneratedGetterConstant autoConstant = new AutoGeneratedGetterConstant(entityFieldName+"."+getterName+"()", idVar);
						solution.replaceBinding(idVar, autoConstant);
					}
				}
			}
		}
		
		// generates ->   org.foo.Clazz fieldName = new org.foo.Clazz();
		sb.append("\t\t");
		sb.append(objectType);
		sb.append(" ");
		sb.append(entityFieldName);
		
		if(isNullObject) {
			sb.append(" = null;\r\n");
		} else {
			sb.append(" = new ");
			sb.append(objectType);
			sb.append("();");
			sb.append("// object id: " + objectId);
			sb.append("\r\n");
			
			for(String innerFieldName : valueMap.keySet()) {
				
				
				
				if(isEntity) {
					Field idField = getIdField(classFile);
					boolean idIsAutoGenerated = isGeneratedIdAttribute(classFile);
					boolean autoGeneratedField = idIsAutoGenerated && innerFieldName.equals(idField.getName());
					if(!autoGeneratedField) {
						generateSetter(sb, entityFieldName, innerFieldName, valueMap.get(innerFieldName));
					}
				} else {
					generateSetter(sb, entityFieldName, innerFieldName, valueMap.get(innerFieldName));
				}
			}
		}
		
		return entityFieldName;
	}
	
	
	private boolean isEntityObjectType(String objectType) {
		for(EntityType<?> et : metamodel.getEntities()) {
			if(et.getJavaType().getName().equals(objectType)) {
				return true;
			}
		}
		try {
			Class<?> c = ClassLoader.getSystemClassLoader().loadClass(objectType);
			if(c.isAnnotationPresent(Entity.class)) {
				return true;
			}
		} catch(Exception e) {
		}
		return false;
	}

	protected void generateSetter(StringBuilder sb, String entityFieldName, String innerFieldName, Object value) {
		if(value == null) return;
		
		String setterName = "set" + innerFieldName.substring(0,1).toUpperCase() + innerFieldName.substring(1);
		if(value instanceof ReferenceVariable && ((ReferenceVariable)value).getInitializedClassName().equals("java.lang.String")) {
			generateStringSetter(sb, entityFieldName, setterName, (ReferenceVariable)value);
		}
		else if(value instanceof EntityDateObjectref) {
			generateDateSetter(sb, entityFieldName, setterName, (EntityDateObjectref)value);
		} else if(value instanceof ReferenceVariable && ((ReferenceVariable)value).getInitializedClassName().equals("java.util.Date")) {
			generateDateSetter(sb, entityFieldName, setterName, (ReferenceVariable)value);
		}
		else if(value instanceof ReferenceCollectionVariable) {
			generateCollectionSetter(sb, entityFieldName, innerFieldName, setterName, (ReferenceCollectionVariable)value);
		}
		else if(value instanceof ReferenceArrayListVariable) {
			generateArrayListSetter(sb, entityFieldName, innerFieldName, setterName, (ReferenceArrayListVariable)value);
		}
		else if(value instanceof ReferenceVariable) {
			ReferenceVariable refVar = (ReferenceVariable)value;
			String refFieldName = generateObject(sb, refVar.getObjectId(), refVar.getObjectType(), refVar.valueMap(), ((ReferenceVariable) value).isNull(), ((ReferenceVariable) value).getInitializedClass().getClassFile());
			generateSimpleSetter(sb, entityFieldName, setterName, refFieldName);
		}
		else if(value instanceof Objectref && ((Objectref)value).getInitializedClassName().equals("java.util.ArrayList")) {
			generateObjectrefArrayList(sb, entityFieldName, innerFieldName, setterName, (Objectref)value);
		}
		else if(value instanceof IntConstant) {
			IntConstant ic = (IntConstant)value;
			String numericValue = getNumericValue(ic).toString();
			generateSimpleSetter(sb, entityFieldName, setterName, numericValue);
		}
		else if(value instanceof NumericVariable) {
			NumericConstant constantValue = (NumericConstant)this.solution.getValue((NumericVariable)value);
			if(constantValue == null) {
				generateSimpleSetter(sb, entityFieldName, setterName, "0");
			} else {
				String numericValue = getNumericValue(constantValue).toString();
				
				if(((NumericVariable)value).isBoolean()) {
					if(numericValue.equals("1")) {
						generateSimpleSetter(sb, entityFieldName, setterName, "true");
					} else if(numericValue.equals("0")) {
						generateSimpleSetter(sb, entityFieldName, setterName, "false");
					} else {
						throw new RuntimeException("Boolean numeric must be 0 or 1");
					}
				} else {
					generateSimpleSetter(sb, entityFieldName, setterName, numericValue);
				}
				
			}
		}
		else if(value instanceof Objectref && ((Objectref) value).getInitializedClassName().equals(String.class.getName())) {
			Object symArrayObject = ((Objectref) value).valueMap().get("value");
			if(symArrayObject instanceof SymbolicArrayref) {
				generateStringSetter(sb, entityFieldName, setterName, (SymbolicArrayref)symArrayObject);
			} else if(symArrayObject instanceof Arrayref) {
				generateStringSetter(sb, entityFieldName, setterName, (Arrayref)symArrayObject);
			}
			
		}
		else if(value instanceof Objectref) {
			Objectref objRef = (Objectref)value;
			String refFieldName = generateObject(sb, objRef.getObjectId(), objRef.getObjectType(), objRef.valueMap(), ((Objectref) value).isNull(), ((Objectref) value).getInitializedClass().getClassFile());
			generateSimpleSetter(sb, entityFieldName, setterName, refFieldName);
		}
		else {
			sb.append("//Could not generate setter for value: " + value + "\r\n");
//			throw new RuntimeException("Could not generate setter for value: " + value);
		}
	}
	

	
	private void generateArrayListSetter(StringBuilder sb, String entityFieldName, String innerFieldName, String setterName, ReferenceArrayListVariable value) {
		String fieldNameOfArraylist = entityFieldName + "_" + innerFieldName;
		sb.append("\t\tList<"+value.getCollectionType()+"> " + fieldNameOfArraylist + " = new ArrayList<>();\r\n");

		// generate elements
		for(Objectref objRef : value.getResultList()) {
			String n = generateObject(sb, objRef.getObjectId(), objRef.getObjectType(), objRef.valueMap(), objRef.isNull(), objRef.getInitializedClass().getClassFile());
			sb.append("\t\t" + fieldNameOfArraylist + ".add(" + n + ");\r\n");
		}
		
		sb.append("\t\t"+entityFieldName+"."+setterName+"("+fieldNameOfArraylist+");\r\n");
	}

	private void generateSimpleSetter(StringBuilder sb, String fieldName, String setterName, String setterValue) {
		sb.append("\t\t");
		sb.append(fieldName);
		sb.append(".");
		sb.append(setterName);
		sb.append("(");
		sb.append(setterValue);
		sb.append(");\r\n");
	}

	private void generateStringSetter(StringBuilder sb, String entityFieldName,	String setterName, ReferenceVariable value) {
		generateSimpleSetter(sb, entityFieldName, setterName, getStringValue(value).toString());
	}
	
	private void generateStringSetter(StringBuilder sb, String entityFieldName,	String setterName, Arrayref symArrayref) {
		generateSimpleSetter(sb, entityFieldName, setterName, getStringValueByArrayref(symArrayref).toString());
	}
	
	private void generateStringSetter(StringBuilder sb, String entityFieldName,	String setterName, SymbolicArrayref symArrayref) {
		generateSimpleSetter(sb, entityFieldName, setterName, getStringValueByArrayref(symArrayref).toString());
	}
	
	private void generateDateSetter(StringBuilder sb, String entityFieldName,	String setterName, ReferenceVariable value) {
		generateSimpleSetter(sb, entityFieldName, setterName, getDateValue(value).toString());
	}
	
	private void generateDateSetter(StringBuilder sb, String entityFieldName,String setterName, EntityDateObjectref value) {
		Object fastTime = value.valueMap().get("fastTime");
		String dateValue = "0";
		if(fastTime != null) {
			if(fastTime instanceof NumericVariable) {
				NumericConstant nc = solution.getNumericValue((NumericVariable)fastTime);
				dateValue = getNumericValue(nc).toString();
			}
			if(fastTime instanceof NumericConstant) {
				dateValue = getNumericValue((NumericConstant)fastTime).toString();
			}
		}
		
		sb.append("\t\t");
		sb.append(entityFieldName);
		sb.append(".");
		sb.append(setterName);
		sb.append("(new java.util.Date(");
		sb.append(dateValue);
		sb.append("));\r\n");
	}
	
	private void generateObjectrefArrayList(StringBuilder sb, String entityFieldName, String innerFieldName, String setterName, Objectref value) {
		String collectionFieldName = entityFieldName+"_"+innerFieldName;
		sb.append("\t\tjava.util.ArrayList<?> ");
		sb.append(collectionFieldName);
		sb.append(" = new ");
		sb.append("java.util.ArrayList<>();\r\n");
		
		Arrayref elementData = (Arrayref)value.valueMap().get("elementData");
		if(elementData != null && elementData.length > 0) {
			for(int i=0; i<elementData.length; i++) {
				sb.append("\t\t // add: " + elementData.getElement(i) + "\r\n");
			}
		}
		
		generateSimpleSetter(sb, entityFieldName, setterName, collectionFieldName);
	}
	
	private void generateCollectionSetter(StringBuilder sb, String entityFieldName, String innerFieldName, String setterName, ReferenceCollectionVariable value) {
		// first, generate the collection
		String collectionFieldName = entityFieldName+"_"+innerFieldName;
		sb.append("\t\tjava.util.ArrayList<");
		sb.append(value.getCollectionType());
		sb.append("> ");
		sb.append(collectionFieldName);
		sb.append(" = new ");
		sb.append("java.util.ArrayList<>();\r\n");
		Map<String, Object> valueMap = value.valueMap();
		SymbolicArrayref elementData = (SymbolicArrayref)valueMap.get("elementData");
		
		Constant lengthConstant = solution.getValue(elementData.getSymbolicLength());
		int length = 0;
		if(lengthConstant != null) {
			length = ((IntConstant)lengthConstant).getIntValue();
		} else if(elementData != null) {
			length = elementData.getElements().size();
		}
		
		// add elements to the array list
		for(int i=0; i<length; i++) {
			Object element = elementData.getElement(i);
			if(element instanceof ReferenceVariable) {
				ReferenceVariable refVar = (ReferenceVariable)element;
				String objectFieldName = generateObject(sb, refVar.getObjectId(), refVar.getObjectType(), refVar.valueMap(), refVar.isNull(), refVar.getInitializedClass().getClassFile());
				sb.append("\t\t");
				sb.append(collectionFieldName);
				sb.append(".add(");
				sb.append(objectFieldName);
				sb.append(");\r\n");
			}
		}
		
//		sb.append("\t\t//adding "+collectionFieldName+".addElement(...) with a length of " + length + "\r\n");
		
		// set the collection to the element
		generateSimpleSetter(sb, entityFieldName, setterName, collectionFieldName);
	}
	
	private StringBuilder getDateValue(ReferenceVariable value) {
		StringBuilder dateValueBuilder = new StringBuilder();
		Object timeInMillis = value.valueMap().get("fastTime");
		if(timeInMillis != null && timeInMillis instanceof NumericVariable) {
			NumericVariable nv = (NumericVariable)timeInMillis;
			NumericConstant nc = this.solution.getNumericValue(nv);
			if(nc != null) {
				dateValueBuilder.append(nc.getLongValue());
				dateValueBuilder.append("L");
			}
		}
		else if(timeInMillis != null && timeInMillis instanceof NumericConstant) {
			NumericConstant nc = (NumericConstant)timeInMillis;
			dateValueBuilder.append(nc.getLongValue());
			dateValueBuilder.append("L");
		}
		return dateValueBuilder;
	}
	
	protected StringBuilder getStringValue(Objectref value) {		
		Object v = getValue(value, "value");
		if(v instanceof SymbolicArrayref) {
			return getStringValueByArrayref((SymbolicArrayref)v);
		}
		if(v instanceof Arrayref) {
			return getStringValueByArrayref((Arrayref)v);
		}
		return new StringBuilder("\"\"");
	}
	
	protected StringBuilder getStringValueByArrayref(Arrayref elementData) {
		StringBuilder stringValueBuilder = new StringBuilder();
		stringValueBuilder.append("\"");
		for(int i=0; i<elementData.length; i++) {
			IntConstant ic = (IntConstant)elementData.getElement(i);
			stringValueBuilder.append((char)ic.getIntValue());
		}
		stringValueBuilder.append("\"");
		return stringValueBuilder;
	}
	
	protected StringBuilder getStringValueByArrayref(SymbolicArrayref elementData) {
		StringBuilder stringValueBuilder = new StringBuilder();
		
		Constant lengthConstant = solution.getValue(elementData.getSymbolicLength());
		int length = 0;
		if(lengthConstant != null) {
			length = ((IntConstant)lengthConstant).getIntValue();
		}
		
		stringValueBuilder.append("\"");
		for(int i=0; i<length; i++) {
			Object elementValue = elementData.getElement(i);
			if(elementValue != null) {
				if(elementValue instanceof NumericConstant) {
					int intValue = ((NumericConstant)elementValue).getIntValue();
					char charValue = (char)intValue;
					stringValueBuilder.append(charValue);
				} else if(elementValue instanceof ReferenceVariable) {
					ReferenceVariable refVarElement = (ReferenceVariable)elementValue;
					int intValue = ((NumericConstant)solution.getValue(refVarElement)).getIntValue();
					char charValue = (char)intValue;
					stringValueBuilder.append(charValue);
				} else if(elementValue instanceof NumericVariable) {
					NumericVariable nv = (NumericVariable)elementValue;
					NumericConstant nc = (NumericConstant)solution.getValue(nv);
					int intValue = nc.getIntValue();
					char charValue = (char)intValue;
					stringValueBuilder.append(charValue);
				}
			} else {
				stringValueBuilder.append('#');
			}
		}
		stringValueBuilder.append("\"");
		return stringValueBuilder;
	}
	

	private String getObjectFieldName(String objectId, String objectClassName) {
		String name = objectFieldNameMap.get(objectId);
		if(name != null) {
			return name;
		}
		
		String[] splitted = objectClassName.split("\\.");
		if(splitted.length > 0) {
			name = splitted[splitted.length-1];
		} else {
			name = objectClassName;
		}
		
		name = name.substring(0, 1).toLowerCase() + name.substring(1);
		Integer entityCounter = this.generatedEntityCounterMap.get(objectClassName);
		if(entityCounter == null) {
			entityCounter = 0;
		} else {
			entityCounter++;
		}
		this.generatedEntityCounterMap.put(objectClassName, entityCounter);
		
		name = name + (entityCounter+1);
		
		objectFieldNameMap.put(objectId, name);
		
		return name;
	}
	
	protected Object getNumericValue(NumericConstant constant) {
		switch(constant.getType()) {
			case Expression.INT : return constant.getIntValue();
			case Expression.FLOAT : return constant.getFloatValue();
			case Expression.DOUBLE : return constant.getDoubleValue();
			case Expression.LONG : return constant.getLongValue();
		}
		throw new RuntimeException("Unsupported numeric type: " +constant.getType());
	}
	
	private Object getValue(Objectref refVar, String field) {
		if(refVar.valueMap().get(field) != null) {
			return refVar.valueMap().get(field);
		}
		
		Set<ReferenceVariable> equalRefVars = this.objectStore.getEqualObjects(refVar.getObjectId());
		if(equalRefVars != null) {
			for(ReferenceVariable equalRefVar : equalRefVars) {
				if(equalRefVar.valueMap().get(field) != null) {
					return equalRefVar.valueMap().get(field);
				}
			}
		}
		
		return null;
	}

	public Map<String, String> getObjectFieldNameMap() {
		return objectFieldNameMap;
	}
	
	
	
	
	
	
	
	
	
	
	protected Field getIdField(ClassFile entityClassFile) {
		String idFieldName = EntityConstraintAnalyzer.getIdFieldName(entityClassFile.getName());
		return this.getField(entityClassFile, idFieldName);
	}
	
	protected Field getField(ClassFile entityClassFile, String fieldName) {
		try {
			Field field = entityClassFile.getFieldByName(fieldName, true);
			return field;
		} catch(FieldResolutionError e) {
			try {
				if(entityClassFile.getSuperClassFile() != null) {
					return getField(entityClassFile.getSuperClassFile(), fieldName);
				}
			} catch (ClassFileException e1) {
			}
		}
		throw new RuntimeException("ID field for entity class: " + entityClassFile + " not found");
	}
	
	protected boolean isGeneratedIdAttribute(ClassFile classFile) {		
		// check field annotations
		Field idField = getIdField(classFile);
		for(Attribute attribute : idField.getAttributes()) {
			AttributeRuntimeVisibleAnnotations attributeAnnotation = (AttributeRuntimeVisibleAnnotations) attribute;
			for(Annotation anno : attributeAnnotation.getAnnotations()) {
				if (anno.getClassFile().getConstantPool()[anno.getTypeIndex()].getStringValue().equals("Ljavax/persistence/GeneratedValue;")) {
					return true;
				}
			}
		}
		
		// check method annotations
		Method idMethod = null;
		String idMethodName = "get"+idField.getName();
		for(Method m : classFile.getMethods()) {
			if(m.getName().toUpperCase().equals(idMethodName.toUpperCase())) {
				idMethod = m;
				break;
			}
		}
		if(idMethod != null) {
			for(Attribute attribute : idMethod.getAttributes()) {
				if(attribute instanceof AttributeRuntimeVisibleAnnotations) {
					AttributeRuntimeVisibleAnnotations attributeAnnotation = (AttributeRuntimeVisibleAnnotations) attribute;
					for(Annotation anno : attributeAnnotation.getAnnotations()) {
						if (anno.getClassFile().getConstantPool()[anno.getTypeIndex()].getStringValue().equals("Ljavax/persistence/GeneratedValue;")) {
							return true;
						}
					}
				}
			}
		}
		
		return false;
	}
}
