package de.wwu.muggl.symbolic.testCases.jpa.db;

import java.util.Map;
import java.util.UUID;

import de.wwu.muggl.solvers.Solution;
import de.wwu.muggl.solvers.expressions.AutoGeneratedGetterConstant;
import de.wwu.muggl.solvers.expressions.Constant;
import de.wwu.muggl.solvers.expressions.Expression;
import de.wwu.muggl.solvers.expressions.IntConstant;
import de.wwu.muggl.solvers.expressions.NumericConstant;
import de.wwu.muggl.solvers.expressions.NumericVariable;
import de.wwu.muggl.vm.initialization.Arrayref;
import de.wwu.muggl.vm.initialization.Objectref;
import de.wwu.muggl.vm.var.ReferenceArrayListVariable;
import de.wwu.muggl.vm.var.ReferenceVariable;
import de.wwu.muggl.vm.var.SymbolicArrayref;

public class MethodParameterTextGenerator {
	
	protected Object[] parameters;
	protected Solution solution;	
	protected Map<String, String> objectNames;
	
	public MethodParameterTextGenerator(Object[] parameters, Solution solution, Map<String, String> objectNames) {
		this.parameters = parameters;
		this.solution = solution;
		this.objectNames = objectNames;
	}

	public void generate(StringBuilder sb) {
		sb.append("\r\n");
		sb.append("\t\t// generate method arguments\r\n");
		for(int i=0; i<parameters.length; i++) {
			generateParameter(sb, parameters[i], i);
		}
	}
	
	private void generateParameter(StringBuilder sb, Object parameter, int i) {
		if(parameter == null) {
			return;
		}
		if(parameter instanceof ReferenceArrayListVariable) {
			generateArrayList(sb, (ReferenceArrayListVariable)parameter, i);
			return;
		}
		
		if(parameter instanceof Objectref) {
			Objectref objRef = (Objectref)parameter;
			String type = objRef.getObjectType();
			String objNameInStore = this.objectNames.get(objRef.getObjectId());
			if(objNameInStore != null) {
				sb.append("\t\t"+ type + " arg"+i+" = " + objNameInStore + ";\r\n");
			} else {
				this.objectNames.put(((Objectref)parameter).getObjectId(), "arg"+i);
				generateObjectRef(sb, (Objectref)parameter, i);
			}
			return;
		}
		if(parameter instanceof NumericConstant) {
			NumericConstant nc = (NumericConstant)parameter;
			if(nc.getType() == Expression.INT) {
				sb.append("\t\tint arg"+i+" = " + nc.getIntValue() + ";\r\n"); return;
			} else if(nc.getType() == Expression.DOUBLE) {
				sb.append("\t\tdouble arg"+i+" = " + nc.getDoubleValue() + ";\r\n"); return;
			} else if(nc.getType() == Expression.FLOAT) {
				sb.append("\t\tfloat arg"+i+" = " + nc.getFloatValue() + ";\r\n"); return;
			} else if(nc.getType() == Expression.LONG) {
				sb.append("\t\tlong arg"+i+" = " + nc.getLongValue() + "L;\r\n"); return;
			}
		}
		
		if(parameter instanceof AutoGeneratedGetterConstant) {
			AutoGeneratedGetterConstant autoGen = (AutoGeneratedGetterConstant)parameter;
			String autoGenValue = autoGen.getFullGetterName();
			if(autoGen.getVariable() instanceof NumericVariable) {
				NumericVariable nv = (NumericVariable)autoGen.getVariable();
				if(nv.getType() == Expression.INT) {
					sb.append("\t\tint arg"+i+" = " + autoGenValue + ";\r\n"); return;
				} else if(nv.getType() == Expression.DOUBLE) {
					sb.append("\t\tdouble arg"+i+" = " + autoGenValue + ";\r\n"); return;
				} else if(nv.getType() == Expression.FLOAT) {
					sb.append("\t\tfloat arg"+i+" = " + autoGenValue + ";\r\n"); return;
				} else if(nv.getType() == Expression.LONG) {
					sb.append("\t\tlong arg"+i+" = " + autoGenValue + "L;\r\n"); return;
				}
			}
		}
		
		throw new RuntimeException("Could not generate text for parameter: " + parameter);
	}

	private void generateArrayList(StringBuilder sb, ReferenceArrayListVariable listVar, int i) {
		generateArrayList(sb, listVar, "arg"+i);
	}
	
	private void generateArrayList(StringBuilder sb, ReferenceArrayListVariable listVar, String name) {
		String type = listVar.getCollectionType();
		sb.append("\t\tjava.util.List<"+type+"> "+name+" = new java.util.ArrayList<>();\r\n");
		int counter=0;
		for(Objectref objRef : listVar.getResultList()) {
			String elementName = name+"_element"+counter++;
			generateListElement(sb, objRef, elementName);
			sb.append("\t\t"+name+".add("+elementName+");\r\n");
		}
	}
	
	private String getValueFromArrayListVar(StringBuilder sb, ReferenceArrayListVariable obj) {
		if(this.objectNames.get(obj.getObjectId()) != null) {
			return this.objectNames.get(obj.getObjectId()); 
		}
		
		String rand = UUID.randomUUID().toString().substring(0, 3);
		String listName = "list"+rand;
		this.objectNames.put(obj.getObjectId(), listName);
		
		generateArrayList(sb, obj, listName);
		return listName;
	}
	
	private void generateListElement(StringBuilder sb, Objectref element, String name) {
		String type = element.getObjectType();
		sb.append("\t\t"+type+" " + name + " = new " + type +"();\r\n");
		for(String fieldName : element.valueMap().keySet()) {
			String setterName = "set" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);
			Object fieldValue = getListElementValueAsString(sb, element.valueMap().get(fieldName));
			sb.append("\t\t"+name+"."+setterName+"("+fieldValue+");\r\n");
		}
	}

	private void generateObjectRef(StringBuilder sb, Objectref parameter, int i) {
		String type = parameter.getObjectType();
		
		if(type.equals("java.lang.String")) {
			generateStringParameter(sb, parameter, i);
			return;
		}
		
		if(type.equals("java.util.Date")) {
			generateDateParameter(sb, parameter, i);
			return;
		}
		
		if(type.equals("java.lang.Double")) {
			String v = getNumericValue(parameter, Expression.DOUBLE);
			if(v == null) {
				v = "0.0";
			}
			sb.append("\t\tDouble arg"+i+" = new Double("+v+");\r\n");
			return;
		}
		
		if(type.equals("java.lang.Integer")) {
			String v = getNumericValue(parameter, Expression.INT);
			if(v == null) {
				v = "0";
			}
			sb.append("\t\tInteger arg"+i+" = new Integer("+v+");\r\n");
			return;
		}
		
		if(type.equals("java.lang.Long")) {
			String v = getNumericValue(parameter, Expression.LONG);
			if(v == null) {
				v = "0L";
			}
			sb.append("\t\tLong arg"+i+" = new Long("+v+");\r\n");
			return;
		}
		
		if(type.equals("java.lang.Float")) {
			String v = getNumericValue(parameter, Expression.FLOAT);
			if(v == null) {
				v = "0.0";
			}
			sb.append("\t\tFloat arg"+i+" = new Float("+v+");\r\n");
			return;
		}
		
		if(type.equals("java.lang.Boolean")) {
			generateBooleanParameter(sb, parameter, i);
			return;
		}
		
		
		
		Objectref objRef = (Objectref)parameter;
//		String objId = objRef.getObjectId();
//		String objName = this.objectNames.get(objId);
//		if(objName != null) {
//			sb.append("\t\t"+ type + " arg"+i+" = " + objName + ";\r\n");
//		} else {
			sb.append("\t\t"+ type + " arg"+i+" = new " + type + "();\r\n");
			Map<String, Object> valueMap = objRef.valueMap();
			for(String fieldName : valueMap.keySet()) {
				Object v = valueMap.get(fieldName);
				String s = getValueAsString(v);
				if(s == null && v instanceof Objectref) {
					s = getValueFromGeneratedObjectref(sb, (Objectref)v);
				}
				if(s == null) {
					sb.append("\t\t// skip setting value for: " + fieldName+"\r\n");
					continue;
				}
				String setterName = "set" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);
				sb.append("\t\targ"+i+"."+setterName+"(" + s + ");\r\n");
			}
//		}
	}
	
	private void generateBooleanParameter(StringBuilder sb, Objectref parameter, int i) {
		Object o = parameter.valueMap().get("value");
		String v = "false";
		if(o != null) {
			v = "<true>";
		}
		sb.append("\t\tBoolean arg"+i+" = new Boolean("+v+");\r\n");
	}
	
	private String getNumericValue(Object o, byte type) {
		if(o instanceof NumericConstant) {
			NumericConstant nc = (NumericConstant)o;
			if(type == Expression.INT) {
				return nc.getIntValue()+"";
			}
			if(type == Expression.FLOAT) {
				return nc.getFloatValue()+"";
			}
			if(type == Expression.DOUBLE) {
				return nc.getDoubleValue()+"";
			}
			if(type == Expression.LONG) {
				return nc.getLongValue()+"L";
			}
		}
		
		if(o instanceof NumericVariable) {
			NumericVariable nv = (NumericVariable)o;
			Constant c = solution.getValue(nv);
			if(c instanceof AutoGeneratedGetterConstant) {
				return ((AutoGeneratedGetterConstant)c).getFullGetterName();
			}
			return getNumericValue(c, nv.getType());
		}
		return null;
	}

	private String getListElementValueAsString(StringBuilder sb, Object obj) {
		if(obj instanceof ReferenceArrayListVariable) {
			return getValueFromArrayListVar(sb, (ReferenceArrayListVariable)obj);
		}
		
		if(obj instanceof Objectref) {
			String value = getValueFromObjectref((Objectref)obj);
			if(value == null) {
				value = getValueFromGeneratedObjectref(sb, (Objectref)obj);
			}
			return value;
		}
		
		return getValueAsString(obj);
	}
	
	private String getValueAsString(Object obj) {		
		if(obj instanceof NumericVariable) {
			NumericVariable nv = (NumericVariable)obj;
			return getNumericValue(obj, nv.getType());
		}
		
		if(obj instanceof NumericConstant) {
			NumericConstant nc = (NumericConstant)obj;
			return getNumericValue(obj, nc.getType());
		}
		
		if(obj instanceof Objectref) {
			return getValueFromObjectref((Objectref)obj);
		}
		
		if(obj instanceof SymbolicArrayref) {
			return getValueFromSymbolicArrayref((SymbolicArrayref)obj);
		}
		
		throw new RuntimeException("Could not get value from object: " + obj);
	}

	private String getValueFromSymbolicArrayref(SymbolicArrayref obj) {
		return "\t\t//symbolic array reference";
	}

	private String getValueFromObjectref(Objectref objectRef) {
		if(objectRef.getObjectType().equals("java.lang.String")) {
			return getStringValueFromObjectref(objectRef);
		}	
		
		if(objectNames.get(objectRef.getObjectId()) != null) {
			return objectNames.get(objectRef.getObjectId());
		}
		
		return null;
//		throw new RuntimeException("Could not get value from objectref: " + objectRef);
	}
	
	private String getValueFromGeneratedObjectref(StringBuilder sb, Objectref objectRef) {
		String type = objectRef.getObjectType();
		String rnd = UUID.randomUUID().toString().substring(0,3);
		String objName = "obj"+rnd;
		
		sb.append("\t\t"+ type + " " + objName + " = new " + type + "();\r\n");
		Map<String, Object> valueMap = objectRef.valueMap();
		for(String fieldName : valueMap.keySet()) {
			Object v = valueMap.get(fieldName);
			String s = getValueAsString(v);
			if(s == null) {
				if(v instanceof ReferenceArrayListVariable) {
					s = objName+"_"+fieldName;
					generateArrayList(sb, (ReferenceArrayListVariable)v, s);
				} else {
					sb.append("\t\t// skip setting value for: " + fieldName+"\r\n");
					continue;
				}
			}
			String setterName = "set" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);
			sb.append("\t\t"+objName+"."+setterName+"(" + s + ");\r\n");
		}
		return objName;
	}
	
	
	
	
	
	private void generateStringParameter(StringBuilder sb, Objectref parameter, int i) {
		String stringValue = getStringValueFromObjectref(parameter);
		sb.append("\t\tString arg"+i+" = new String("+stringValue+");\r\n");
	}
	
	
	private void generateDateParameter(StringBuilder sb, Objectref parameter, int i) {
		int v = getDateValueFromObjectref(parameter);
		sb.append("\t\tjava.util.Date arg"+i+" = new java.util.Date("+v+");\r\n");
	}
	
	

	private int getDateValueFromObjectref(Objectref parameter) {
		Object o = parameter.valueMap().get("fastTime");
		if(o instanceof NumericVariable) {
			NumericConstant nc = (NumericConstant)this.solution.getValue((NumericVariable)o);
			return nc.getIntValue();
		}
		if(o instanceof NumericConstant) {
			return ((NumericConstant)o).getIntValue();
		}
		return -1;
	}

	private String getStringValueFromObjectref(Objectref parameter) {
		Map<String, Object> valueMap = parameter.valueMap();
		Object stringValue = valueMap.get("value");
		if(stringValue == null) {
			return "\"\"";
		}
		if(stringValue instanceof SymbolicArrayref) {
			String value = "\"";
			SymbolicArrayref symArr = (SymbolicArrayref)stringValue;
			Constant lengthConstant = solution.getValue(symArr.getSymbolicLength());
			int length = 0;
			if(lengthConstant != null) {
				length = ((IntConstant)lengthConstant).getIntValue();
			}
			for(int i=0; i<length; i++) {
				Object elementValue = symArr.getElement(i);
				if(elementValue != null) {
					if(elementValue instanceof NumericConstant) {
						int intValue = ((NumericConstant)elementValue).getIntValue();
						char charValue = (char)intValue;
						value += charValue;
					} else if(elementValue instanceof ReferenceVariable) {
						ReferenceVariable refVarElement = (ReferenceVariable)elementValue;
						int intValue = ((NumericConstant)solution.getValue(refVarElement)).getIntValue();
						char charValue = (char)intValue;
						value += charValue;
					} else if(elementValue instanceof NumericVariable) {
						NumericVariable nv = (NumericVariable)elementValue;
						NumericConstant nc = (NumericConstant)solution.getValue(nv);
						int intValue = nc.getIntValue();
						char charValue = (char)intValue;
						value += charValue;
					}
				} else {
					value += "#";
				}
			}
			
			return value + "\"";
		}
		if(stringValue instanceof Arrayref) {
			String value = "";
			Arrayref elementData = (Arrayref)stringValue;
			for(int i=0; i<elementData.length; i++) {
				IntConstant ic = (IntConstant)elementData.getElement(i);
				value += ((char)ic.getIntValue());
			}
			return value;
		}
		
		throw new RuntimeException("Could not get string from objectref: " + parameter);
	}
	
	
	
	
	protected StringBuilder getStringValueByArrayref(Arrayref elementData) {
		StringBuilder stringValueBuilder = new StringBuilder();
		stringValueBuilder.append("\"");
		for(int i=0; i<elementData.length; i++) {
			IntConstant ic = (IntConstant)elementData.getElement(i);
			stringValueBuilder.append((char)ic.getIntValue());
		}
		stringValueBuilder.append("\"");
		return stringValueBuilder;
	}
	
}
