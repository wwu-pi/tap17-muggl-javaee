package de.wwu.muggl.symbolic.generating;

/**
 * Interface for array element generators that the symbolic virtual machine may use.
 *
 * Processing arrays symbolically is a hard task. To meet this problem, the symbolic
 * virtual machine utilizes a built-in array generator that will provide arrays of
 * variables. It uses a chosable distinct strategy to get arrays of different
 * length. The elements of arrays generated by the ArrayGenerator are unbound variables
 * by default. However, methods being tested might have semantical requirements for
 * the arrays they process. In the best case they check those requirements. This would
 * however result in a large number of symbolic runs being completely useless. In the
 * worst case they process arrays they are not supposed to process. This could lead to
 * unexpected results.
 *
 * Example: Imagine a search algorithm that searches a sorted array for an integer value.
 * It will most likely be possible to find a minimal set of test cases that will cover
 * all def-use chains and all coverable control flow edges. However, if not using sorted
 * arrays as the input, the test cases will look really weird. Without further checking,
 * would you trust that the following three search cases are enough to completely test
 * the binary search algorithm?
 * Search for 0 in {0,1,0}, result is 0.
 * Search for 1 in {0,0}, result is -1.
 * Search for 0 in null, the method will thrown an exception.
 * It would be better to have at least the first test case changed to 0 in {0,1,2}.
 *
 * Beside the readability of test cases, providing semantical correct data structures for
 * the symbolic execution can greatly decreased the required execution time.
 *
 * @see de.wwu.muggl.symbolic.searchAlgorithms.choice.array.ArrayGenerator
 * @see de.wwu.muggl.symbolic.searchAlgorithms.choice.array.ArrayInitializationChoicePoint
 * @see de.wwu.muggl.symbolic.generating.Generator
 *
 * @author Tim Majchrzak
 * @version 1.0.0, 2010-03-10
 */
public interface ArrayElementsGenerator extends GenericGenerator {

	/**
	 * Check if this generator can provide another element.
	 * @return true, if this generator can provide another element, false otherwise.
	 */
	boolean hasAnotherElement();

	/**
	 * Provide a generated element.
	 *
	 * @param index The index the element requested will take in the array.
	 * @return A generated element.
	 * @throws IllegalStateException
	 *             If no more elements are available. This cannot happen if checking the availability with
	 *             hasAnotherElement() first and not having more than one thread access this generator.
	 */
	Object provideElement(int index);

	/**
	 * If the generator implements a deterministic strategy of generating elements,
	 * reset it.
	 */
	void reset();

}
