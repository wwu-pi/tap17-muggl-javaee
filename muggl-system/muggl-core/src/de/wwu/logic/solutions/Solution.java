package de.wwu.logic.solutions;

import de.wwu.muggl.solvers.expressions.Expression;

/**
 * Stores a single solution generated by logic computation and offers methods for data retrieval and altering of the solution.
 * 
 * @author Tim Majchrzak
 * @version 1.0.0, 2010-07-20
 * @param <T> The type of the solution.
 */
public class Solution<T> {
	protected T solution;
	protected Expression expression;
	
	/**
	 * Default constructor.
	 */
	protected Solution() {}
	
	/**
	 * Constructor that initializes the class with an solution.
	 * 
	 * @param solution The solution.
	 */
	public Solution(T solution) {
		this.solution = solution;
	}
	
	/**
	 * Get the solution.
	 *
	 * @return The solution.
	 */
	public T getSolution() {
		return this.solution;
	}
	
	/**
	 * Checks whether the solution is grounded, i.e. it contains no unbound variables.
	 *
	 * @return true if the solution contains only constants, false otherwise.
	 */
	public boolean isGround() {
		// TODO
		return true;
	}
	
	/**
	 * Get the {@link Expression} associated with this solution.
	 *
	 * @return The expression associated with this solution.
	 */
	public Expression getExpression() {
		// TODO
		return null;
	}
		
	/**
	 * Get a String representation of this solution and the associated expression.
	 * 
	 * @return A String representation.
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		// TODO
		return null;
	}
	
	/**
	 * Print this solution and the expression associated with it to System.out.
	 */
	public void printSolution() {
		// TODO
	}
	
	/**
	 * Add a constraint to this solution.
	 *
	 * @param expr An expression.
	 */
	public void addConstraint(Expression expr) {
		// TODO
		expr.hashCode();
	}
	
	/**
	 * Check whether this solution is satisfiable
	 *
	 * @return true if it is is satisfiable, false otherwise.
	 */
	public boolean isSatisfiable() {
		// TODO
		return true;
	}

	/**
	 * Find an example solution. It is equal to the solution returned by {@link #getSolution()} if
	 * the solution is grounded. Otherwise, a solution will be calculated.
	 * 
	 * @return An example solution.
	 */
	public Solution<T> findExampleResult() {
		// TODO
		return null;
	}
	
}
