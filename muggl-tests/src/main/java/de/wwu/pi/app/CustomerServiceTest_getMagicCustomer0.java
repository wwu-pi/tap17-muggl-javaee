package de.wwu.pi.app;

import static org.junit.Assert.*;

import javax.inject.Inject;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.Archive;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.EmptyAsset;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import de.wwu.javaee.test.runner.MugglExceptionMatcher;
/**
 * This class has been generated by Muggl for the automated testing of method
 * de.wwu.pi.app.ejb.CustomerService.getMagicCustomer(java.lang.String customerId).
 * Test cases have been computed using the symbolic execution of Muggl. Muggl
 * is a tool for the fully automated generation of test cases by analysing a
 * program's byte code. It aims at testing any possible flow through the program's
 * code rather than "guessing" required test cases, as a human would do.
 * Refer to http://www.wi.uni-muenster.de/pi/personal/majchrzak.php for more
 * information or contact the author at tim.majchrzak@wi.uni-muenster.de.
 * 
 * Executing the method main(null) will invoke JUnit (if it is in the class path).
 * The methods for setting up the test and for running the tests have also been
 * annotated.
 * 
 * Important settings for this run:
 * Search algorithm:            iterative deepening depth first
 * Time Limit:                  1 hours
 * Maximum loop cycles to take: 200
 * Maximum instructions before
 * finding a new solution:     infinite
 * Solver:                     de.wwu.muggl.solvers.jacop.JaCoPSolverManager
 * 
 * The total number of solutions found was 3. After deleting redundancy and
 * removing unnecessary solutions, 3 distinct test cases were found.
 * There was no further reduction of test cases.
 * 
 * This file has been generated on Wednesday, 01 March, 2017 22:28.
 * 
 * @author Muggl 1.00 Alpha (unreleased)
 */
@RunWith(Arquillian.class)
public class CustomerServiceTest_getMagicCustomer0 extends AbstractCustomerServiceTest {
	private de.wwu.pi.app.entities.Customer reference0;
	@Inject
	private de.wwu.pi.app.ejb.CustomerService testedClass;

	@Deployment
	public static Archive<?> createDeployment() {
		return ShrinkWrap.create(WebArchive.class, "test.war")
			.addClasses(requiredApplicationClasses)
			.addAsResource("META-INF/persistence.xml")
			.addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml");
	}


	/**
	 * Set up the unit test by initializing the fields to the desired values.
	 */
	@Before public void setUp() {
		this.reference0 = new de.wwu.pi.app.entities.Customer();
	}
	/**
	 * Run the tests on de.wwu.pi.app.ejb.CustomerService.getMagicCustomer(java.lang.String customerId).
	 */
	@Test public void testGetMagicCustomer1() throws Exception { 
		// pre-execution required data 
		utx.begin();
		em.joinTransaction();
		// generate object with id: de.wwu.pi.app.entities.Customer13
		de.wwu.pi.app.entities.Customer customer1 = new de.wwu.pi.app.entities.Customer();// object id: de.wwu.pi.app.entities.Customer13
		customer1.setName("#");
		customer1.setId("#");
		customer1.setStatus(0);
		em.persist(customer1);
		utx.commit();
		em.clear();

		// generate method arguments
		String arg1 = new String("#");
		/** SOLUTION 
		{DATA#entity-object#Customer14.name.value.element.0=35, DATA#entity-object#Customer14.name.value.length=1, DATA#entity-object#Customer14.status=0, REQ#entity-object#Customer12.name.value.element.0=35, REQ#entity-object#Customer12.name.value.length=1, REQ#entity-object#Customer12.name.value.length=1, REQ#entity-object#Customer12.status=0, REQ#entity-object#Customer12.status=0, customerId.value.value.length=1}
		  ***********************************/ 
		thrown.expect(new MugglExceptionMatcher(de.wwu.pi.app.util.NoMagicException.class));
		this.testedClass.getMagicCustomer(arg1);
		// check post-execution database state 
		de.wwu.pi.app.entities.Customer entity14_db = (de.wwu.pi.app.entities.Customer)em.find(de.wwu.pi.app.entities.Customer.class, customer1.getId());
		assertNotNull(entity14_db);
		assertEquals("#", entity14_db.getName());
		assertEquals("#", entity14_db.getId());
		assertEquals(0, entity14_db.getStatus());
	} 
 
	@Test public void testGetMagicCustomer2() throws Exception { 
		// pre-execution required data 
		utx.begin();
		em.joinTransaction();
		// generate object with id: de.wwu.pi.app.entities.Customer13
		de.wwu.pi.app.entities.Customer customer1 = new de.wwu.pi.app.entities.Customer();// object id: de.wwu.pi.app.entities.Customer13
		customer1.setName("#");
		customer1.setId("#");
		customer1.setStatus(4);
		em.persist(customer1);
		utx.commit();
		em.clear();

		// generate method arguments
		String arg1 = new String("#");
		/** SOLUTION 
		{DATA#entity-object#Customer14.name.value.element.0=35, DATA#entity-object#Customer14.name.value.length=1, DATA#entity-object#Customer14.status=4, REQ#entity-object#Customer12.name.value.element.0=35, REQ#entity-object#Customer12.name.value.length=1, REQ#entity-object#Customer12.name.value.length=1, REQ#entity-object#Customer12.status=4, REQ#entity-object#Customer12.status=0, customerId.value.value.length=1}
		  ***********************************/ 
		assertEquals(this.reference0, this.testedClass.getMagicCustomer(arg1));
		// check post-execution database state 
		de.wwu.pi.app.entities.Customer entity14_db = (de.wwu.pi.app.entities.Customer)em.find(de.wwu.pi.app.entities.Customer.class, customer1.getId());
		assertNotNull(entity14_db);
		assertEquals("#", entity14_db.getName());
		assertEquals("#", entity14_db.getId());
		assertEquals(4, entity14_db.getStatus());
	} 
 
	@Test public void testGetMagicCustomer3() throws Exception { 
		// pre-execution required data 
		utx.begin();
		em.joinTransaction();
		utx.commit();
		em.clear();

		// generate method arguments
		String arg1 = new String("#");
		/** SOLUTION 
		{DATA#entity-object#Customer14.name.value.element.0=35, DATA#entity-object#Customer14.name.value.length=-50, DATA#entity-object#Customer14.status=-50, REQ#entity-object#Customer12.name.value.element.0=35, REQ#entity-object#Customer12.name.value.length=-50, REQ#entity-object#Customer12.name.value.length=-50, REQ#entity-object#Customer12.status=-50, REQ#entity-object#Customer12.status=-50, customerId.value.value.length=1}
		  ***********************************/ 
		thrown.expect(new MugglExceptionMatcher(de.wwu.pi.app.util.CustomerNotFoundException.class));
		this.testedClass.getMagicCustomer(arg1);
		// check post-execution database state 
	} 
 
}